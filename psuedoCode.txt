Create a node class 
    constructor = > ( data )
    properties => { data, rightKid, leftKid }
build a tree class  
    constructor => ( array )
    properties => {root =  (returned value of the buildTree function) }

create a function that takes an array of data and turns it into a balanced 
binary tree full of Node objects appropitalely placed (dont forget to sort and remove
duplicates) The function should return the level - 0 root node 

buildTree(array)
    Set the middle of the array 
    let root is going to be the root node of tree 
    Recursively get middle of the left and right subtree
    Return root 

create a function that inserts the given value into the array being inserted 
insert(value , currentNode = this.root) { 
    if root is null return a new node with the value inside of it 
    if value is less than the root value ; run the insert method recursively for the left side of the root
        assign currentNode.left to the insert function with the value and currentNode left as the parameters 
    if value is more than the root value; run the insert method recursively for the right side of the root
        assign currentNode.right to the insert function with the value and currentNode right as the parameters 
    return currentNode 
}


create min function that returns the smallest value in the tree {

min(root) { 
    check root.left to see if it is null 
        if null then return the root.value 
        else return rootl.left recursively 
}

create max function that returns the largest value in the tree 

max(root) 
    check root.right to see if it is null 
    if null then return the root.value 
    else return the root.right recursively

create a function that will delete a node in the tree 
delete(value) { 
    assign root to run deleteNode function recursively with (root , value) as constructors 

}

deleteNode(value, root){ 

    check if the root is empty if true return null
    
    if value is less than root.data then run the method recursiviely left with value 
    
    else if value is more than root.data then run the method recrusively right with value 
    
    else 
        if root left is null then return the right sode the root 
        else if root right is null then return the left side of the root 
        else (AKA value and root data are equal) then root data becomes the min of root right
        right of root becomes a recursive with root = root.right and value = root.data 
    
    return root 
}


create a function that takes a value and return the node with the given value 
if there is no value then return false 
find(value, currentNode = this.root) { 
    check if the value is empty if true return null
    if value = currentNode.data  return the currentNode 
    if value is less than currentNode data then run find recursively on left subtree 
    else if value is more than currentNode data then run find recursevly on right subtree 
}

create a function that process and logs the node to the console 
printInfo(node, level, res) { 
    if level inside of res is not true return an empty array assigned to the level of res 
    add the node data into level of the res array 
}  

create a function that returns the binaray tree in a level Order list using a callback and without a callback
also recursively and iteratively 

iterative version 
levelOrderIterative(root, callback = this.processInfo){
    check if root is null return if true 
    create a q array with root as the index 
    create a empty array and call it res 
    create a level variable and assign it to 0 

    while q's length is greater than 0 
        put the length of the q into a variable called length 
        add a level(empty array) to the queue
            every time that i is less than length 
                capture the front of the q in "front"
                call the callback with front, leve, and res as the constructors 
                if front's left node is true then push it into queue 
                if front's right node is true then push it into the queue  
            increment level
        return res          
}

**** recursive version *****

levelOrderRec(root, level , callback, res){ 
    check if the root is null if true return null 
    invoke the callback(root, level, res) 

    recursively run the method left and right (rL , level + 1, callback, res)
    recursively run the method right 
}

levelOrder(root, callback=this.processInfo) { 
    const res = an empty array
    run levelORderRec with { root, 0 , callback, res, }as the constructors
    return res
}
**** END OF levelOrder FUNCTION *****
create a function that takes a callback and  does the inorder depth-first order method 
pass each node through the callback

create a function that processInfo in a bts using the depth-first strategies 

** inOrder functions ** 
inOrderIter(root, callBack){
    check if null is empty return if true 
    
    create a stack array; set it to empty 
    create a current node assign it to root 
    while current or stack length is more than 0 
        while current is true 
            push current into the stack 
            current becomes left node 
        current becomes the node removed from the back of the stack 
        call the callback with current.value 
        change current to the right node of current 
            
}

** recursive version of inOrder ** 
inOrderRec(root, callBack) { 
    check if the root is null if true then return 
    run the left side of the root recursively 
    call the callback on the root 
    run the right side of the root recursively 
} 


** End of inorder functions ** 
create a function that displays the binaray tree using the preOrder 
preOrder(root){
    check if root is null 
}

create a function that takes a callback and  does the postOrder depth-first order method 
pass each node through the callback


postOrder(callBack){
    
}

create a function that returns the given node's height;

height(node){ 

}

create a function that returns the given nodes' depth 

depth(node) {

}

create a function that checks if the tree is balanced 

isBalanced() {

}

create a function that rebalances a unblanaced tree

reblanace(){

}